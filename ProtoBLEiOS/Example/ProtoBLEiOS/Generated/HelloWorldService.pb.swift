// DO NOT EDIT THIS FILE! Generated from hello.proto

import Foundation
import ProtoBLEiOS
import CoreBluetooth

let HelloWorldService_UUID = CBUUID(string: "b481e98f-ecc2-46cc-a91b-bf32ebd35b06")

let HELLOWORLD_PARAM_UUID = CBUUID(string: "3d9e21c9-c15b-4f56-be8b-e3cb9a885ff5")
let HELLOWORLD_RETURN_UUID = CBUUID(string: "e9962334-d9b8-4b8c-8f55-405f0fa4da0d")
let GETTIME_PARAM_UUID = CBUUID(string: "fded380a-171a-4a6c-9b19-74fe311e3b3d")
let GETTIME_RETURN_UUID = CBUUID(string: "bfc78fb4-6e92-4a36-bb2d-22dfd658d254")

protocol HelloWorldDelegate: ProtoBleServiceDelegate {
    func helloWorldDidComplete(_ greeting: Greeting)
    func helloWorldMessageProgress(current: Int, total: Int)

    func getTimeDidComplete(_ timeResponse: TimeResponse)
    func getTimeMessageProgress(current: Int, total: Int)

}

class HelloWorldBleService: ProtoBleServiceDelegate {
    let bleService: ProtoBleService
    let clientDelegate: HelloWorldDelegate

    let helloWorldRpc: ProtoBleRpc
    class HelloWorldRpcHandler: ProtoBleRpcDelegate {
        let delegate: HelloWorldDelegate
        init(_ delegate: HelloWorldDelegate) { 
            self.delegate = delegate
        }

        func messageWasReceived(_ data: Data) {
            if let x = try? Greeting(serializedData: data) {
                 delegate.helloWorldDidComplete(x)
            }
            else {
                 delegate.bleDidError(ProtoBleError(kind: .invalidMessage, message: "Received InvalidGreeting Message."))
            }
        }
        func messageProgress(current:Int, total:Int) {
            delegate.helloWorldMessageProgress(current: current, total: total)
        }
        func rpcDidError(_ err: Error) {
            self.delegate.bleDidError(err)
        }
    }

    let getTimeRpc: ProtoBleRpc
    class GetTimeRpcHandler: ProtoBleRpcDelegate {
        let delegate: HelloWorldDelegate
        init(_ delegate: HelloWorldDelegate) { 
            self.delegate = delegate
        }

        func messageWasReceived(_ data: Data) {
            if let x = try? TimeResponse(serializedData: data) {
                 delegate.getTimeDidComplete(x)
            }
            else {
                 delegate.bleDidError(ProtoBleError(kind: .invalidMessage, message: "Received InvalidTimeResponse Message."))
            }
        }
        func messageProgress(current:Int, total:Int) {
            delegate.getTimeMessageProgress(current: current, total: total)
        }
        func rpcDidError(_ err: Error) {
            self.delegate.bleDidError(err)
        }
    }

    public init(delegate: HelloWorldDelegate) {
        clientDelegate = delegate
        let helloWorldRpcHandler = HelloWorldRpcHandler(delegate)
        helloWorldRpc = ProtoBleRpc(name: "helloWorld", paramUuid: HELLOWORLD_PARAM_UUID, resultUuid: HELLOWORLD_RETURN_UUID, rpcDelegate: helloWorldRpcHandler)
        let getTimeRpcHandler = GetTimeRpcHandler(delegate)
        getTimeRpc = ProtoBleRpc(name: "getTime", paramUuid: GETTIME_PARAM_UUID, resultUuid: GETTIME_RETURN_UUID, rpcDelegate: getTimeRpcHandler)
        bleService = ProtoBleService(serviceUuid: HelloWorldService_UUID, rpc: [helloWorldRpc,getTimeRpc])
        bleService.serviceDelegate = self
    }

    func helloWorld(introduction: Introduction) throws {
        try helloWorldRpc.writeValue(data: introduction.serializedData())
    }

    func getTime(timeRequest: TimeRequest) throws {
        try getTimeRpc.writeValue(data: timeRequest.serializedData())
    }

    func bleDidDiscoverCharacteristics() {
        clientDelegate.bleDidDiscoverCharacteristics()
    }
    func bleDidError(_ error: Error) {
        clientDelegate.bleDidError(error);
    }

}
