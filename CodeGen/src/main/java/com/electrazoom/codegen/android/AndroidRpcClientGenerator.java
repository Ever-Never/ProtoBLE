/*
 * ProtoBLE - Protobuf RPC over Bluetooth Low Energy
 * Copyright (c) 2018. Geoffrey Matrangola, electrazoom.com
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, version 3 of the License.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>
 *
 *     This program is also available under a commercial license. If you wish
 *     to redistribute this library and derivative work for commercial purposes
 *     please see ProtoBLE.com to obtain a proprietary license that will fit
 *     your needs.
 */

package com.electrazoom.codegen.android;

import com.electrazoom.codegen.JavaClassGenerator;
import com.google.protobuf.DescriptorProtos;
import com.google.protobuf.compiler.PluginProtos;
import com.squareup.javapoet.ArrayTypeName;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

import java.util.UUID;

import static javax.lang.model.element.Modifier.*;

/**
 * Builds a Service used by the Activities etc to connect to and message with the server
 */
public class AndroidRpcClientGenerator extends JavaClassGenerator {

    private TypeSpec.Builder clientRpcService;
    private String serviceClassName;

    protected AndroidRpcClientGenerator(PluginProtos.CodeGeneratorResponse.Builder response) {
        super(response);
    }

    @Override
    protected JavaFile generateServiceClasses(DescriptorProtos.ServiceDescriptorProto service) {
        serviceClassName = service.getName() + "BleCentralService";
        clientRpcService = TypeSpec.classBuilder(serviceClassName);
        clientRpcService.addModifiers(PUBLIC);
        clientRpcService.addSuperinterface(constantInterfaceName(service));
        ClassName superclass = ClassName.get("com.electrazoom.protoble.central",
                "ProtoBleCentralService");
        clientRpcService.superclass(superclass);
        clientRpcService.addJavadoc("GENERATED CODE: DO NOT MODIFY SOURCE. " +
                        "Generated by electrazoom Code Generator from the $N protobuf file",
                service.getName());
        ClassName uuid = ClassName.get(UUID.class);

        for (DescriptorProtos.MethodDescriptorProto method : service.getMethodList()) {
            FieldSpec uuidParam = FieldSpec.builder(uuid, paramConstant(method))
                    .addModifiers(PRIVATE, STATIC, FINAL)
                    .initializer("UUID.fromString($N)", paramUuidName(method.getName()))
                    .build();
            clientRpcService.addField(uuidParam);
            FieldSpec uuidReturn = FieldSpec.builder(uuid, returnConstant(method))
                    .addModifiers(PUBLIC, STATIC, FINAL)
                    .initializer("UUID.fromString($N)", returnUuidName(method.getName()))
                    .build();
            clientRpcService.addField(uuidReturn);
        }

        TypeSpec.Builder listenerBuilder = TypeSpec.interfaceBuilder(service.getName() + "Listener");
        ClassName superListener = ClassName.get(
                "com.electrazoom.protoble.central.ProtoBleCentralService", "ServiceListener");
        listenerBuilder.addSuperinterface(superListener);
        listenerBuilder.addModifiers(PUBLIC);
        for (DescriptorProtos.MethodDescriptorProto method : service.getMethodList()) {
            listenerBuilder.addMethod(methodBuilder(method));
        }
        TypeSpec listenerInterface = listenerBuilder.build();
        clientRpcService.addType(listenerInterface);
        ClassName listenerClass = ClassName.get(javaPackage, serviceClassName, service.getName() + "Listener");

        clientRpcService.addField(listenerClass, "listener", PRIVATE);

        MethodSpec listenerSetter = MethodSpec.methodBuilder("set" + service.getName() +
                "Listener")
                .addModifiers(PUBLIC)
                .addParameter(listenerClass, "listener")
                .addStatement("this.listener = listener")
                .addStatement("super.setListener(listener)")
                .build();
        clientRpcService.addMethod(listenerSetter);

        for (DescriptorProtos.MethodDescriptorProto method : service.getMethodList()) {
            responseListener(method);
        }

        TypeSpec.Builder localBinderType = TypeSpec.classBuilder("LocalBinder");
        localBinderType.addModifiers(PUBLIC);
        localBinderType.superclass(ClassName.get("android.os", "Binder"));
        MethodSpec.Builder getService = MethodSpec.methodBuilder("getService");
        getService.addModifiers(PUBLIC);
        ClassName thisClass = ClassName.get(javaPackage, serviceClassName);
        getService.returns(thisClass);
        getService.addStatement(CodeBlock.builder().add("return $T.this", thisClass).build());
        localBinderType.addMethod(getService.build());
        clientRpcService.addType(localBinderType.build());

        ClassName iBinder = ClassName.get("android.os", "IBinder");
        FieldSpec.Builder localBinder = FieldSpec.builder(iBinder, "localBinder", PRIVATE);
        localBinder.initializer("new LocalBinder()");
        clientRpcService.addField(localBinder.build());

        MethodSpec.Builder onBind = MethodSpec.methodBuilder("onBind");
        onBind.addAnnotation(Override.class);
        onBind.addModifiers(PUBLIC);
        onBind.returns(iBinder);
        onBind.addParameter(ClassName.get("android.content", "Intent"), "intent");
        onBind.addStatement("return localBinder");
        clientRpcService.addMethod(onBind.build());

        MethodSpec.Builder onCreate = MethodSpec.methodBuilder("onCreate");
        onCreate.addAnnotation(Override.class);
        onCreate.addModifiers(PUBLIC);
        onCreate.addStatement("setServiceUuid(UUID.fromString(SERVICE_UUID))");
        onCreate.addStatement("super.onCreate()");
        clientRpcService.addMethod(onCreate.build());

        MethodSpec.Builder connect = MethodSpec.methodBuilder("connect")
                .addModifiers(PUBLIC)
                .addAnnotation(Override.class)
                .addException(ClassName.get("com.electrazoom.protoble.central", "CentralServiceException"))
                .addParameter(ClassName.get("android.bluetooth", "BluetoothDevice"), "device");
        for (DescriptorProtos.MethodDescriptorProto method : service.getMethodList()) {
            connect.addStatement("addInputCharacteristic($L_PARAM, $LListener)",
                    method.getName().toUpperCase(), method.getName());
            connect.addStatement("addOutputCharacteristic($L_RETURN, $LListener)",
                    method.getName().toUpperCase(), method.getName());
        }
        connect.addStatement("super.connect(device)");
        clientRpcService.addMethod(connect.build());

        MethodSpec.Builder setListener = MethodSpec.methodBuilder("setListener");
        setListener.addParameter(ClassName.get(javaPackage, service.getName() + "Listener"),
                "listener", FINAL);
        setListener.addStatement("this.listener = listener");

        TypeSpec.Builder serviceListener = TypeSpec.anonymousClassBuilder("");
        serviceListener.addSuperinterface(ClassName.get("com.electrazoom.protoble.central",
                "ProtoBleCentralService", "ServiceListener"));
        serviceListener.addMethod(MethodSpec.methodBuilder("onServiceConnected")
            .addAnnotation(Override.class)
            .addModifiers(PUBLIC)
            .addCode("listener.onServiceConnected()").build());
        serviceListener.addMethod(MethodSpec.methodBuilder("onError")
            .addAnnotation(Override.class)
            .addParameter(String.class, "error")
            .addCode("listener.onError(error)").build());
        setListener.addCode("super.setListener($L)", serviceListener.build());

        for (DescriptorProtos.MethodDescriptorProto method : service.getMethodList()) {
            MethodSpec methodSpec = MethodSpec.methodBuilder(method.getName())
                    .addModifiers(PUBLIC)
                    .addParameter(ClassName.get(javaPackage, outerClassName, method.getInputType().substring(1)),
                            "in")
                    .addStatement("writeMessage($L, in.toByteArray())", paramConstant(method))
                    .addException(ClassName.get("com.electrazoom.protoble.central",
                            "CentralServiceException"))
                    .build();
            clientRpcService.addMethod(methodSpec);
        }

        return JavaFile.builder(javaPackage, clientRpcService.build()).build();
    }

    private String returnConstant(DescriptorProtos.MethodDescriptorProto method) {
        return method.getName().toUpperCase() + "_RETURN";
    }

    private String paramConstant(DescriptorProtos.MethodDescriptorProto method) {
        return method.getName().toUpperCase() + "_PARAM";
    }

    private void responseListener(DescriptorProtos.MethodDescriptorProto method) {
        String responseListenerName = initialCaps(method.getName()) + "ResponseListener";
        TypeSpec.Builder responseListener = TypeSpec.classBuilder(responseListenerName);
        responseListener.addSuperinterface(ClassName.get(
                "com.electrazoom.protoble.central.ProtoBleCentralService", "ResponseListener"));

        MethodSpec.Builder onResponse = MethodSpec.methodBuilder("onResponse")
                .addAnnotation(Override.class)
                .addModifiers(PUBLIC)
                .addParameter(ArrayTypeName.of(byte.class), "message");
        CodeBlock.Builder block = CodeBlock.builder();
        block.beginControlFlow("try");
        block.addStatement("listener.$L($L.parseFrom(message))",
                "on" + initialCaps(method.getName()), methodType(method.getOutputType()));
        block.endControlFlow(); // try
        ClassName protobufException = ClassName.get("com.google.protobuf",
                "InvalidProtocolBufferException");
        block.beginControlFlow("catch ($T e)", protobufException);
        block.addStatement("listener.onError(\"$L: \" + e.getLocalizedMessage())", method.getName());
        block.endControlFlow(); // catch
        onResponse.addCode(block.build());
        responseListener.addMethod(onResponse.build());

        MethodSpec.Builder onError = MethodSpec.methodBuilder("onError")
                .addAnnotation(Override.class)
                .addModifiers(PUBLIC)
                .addParameter(String.class, "error");
        onError.addStatement("listener.onError(error)");
        responseListener.addMethod(onError.build());

        TypeSpec typeSpec = responseListener.build();
        clientRpcService.addType(typeSpec);
        ClassName responseListenerClass = ClassName.get(javaPackage, serviceClassName,
                responseListenerName);
        FieldSpec listenerField = FieldSpec.builder(
                responseListenerClass, method.getName() + "Listener", PRIVATE)
                .initializer("new $L()", responseListenerClass)
                .build();
        clientRpcService.addField(listenerField);
    }

    private MethodSpec methodBuilder(DescriptorProtos.MethodDescriptorProto method) {
        MethodSpec.Builder methodSpec = MethodSpec.methodBuilder("on" + initialCaps(method.getName()));
        methodSpec.addParameter(methodType(method.getOutputType()), "output", FINAL);
        methodSpec.addModifiers(PUBLIC, ABSTRACT);
        return methodSpec.build();
    }
}
