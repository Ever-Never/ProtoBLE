/*
 * ProtoBLE - Protobuf RPC over Bluetooth Low Energy
 * Copyright (c) 2018. Geoffrey Matrangola, electrazoom.com
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, version 3 of the License.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>
 *
 *     This program is also available under a commercial license. If you wish
 *     to redistribute this library and derivative work for commercial purposes
 *     please see ProtoBLE.com to obtain a proprietary license that will fit
 *     your needs.
 */

package com.electrazoom.codegen.server;

import com.electrazoom.codegen.JavaClassGenerator;
import com.google.protobuf.DescriptorProtos;
import com.google.protobuf.compiler.PluginProtos;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

import java.util.HashMap;
import java.util.Map;

import javax.lang.model.element.Modifier;

public class RpcServerGenerator extends JavaClassGenerator {

    private TypeSpec.Builder serviceRpcServer;
    private Map<String, FieldSpec> paramCharacteristicFields = new HashMap<>();
    private Map<String, FieldSpec> returnCharacteristicFields = new HashMap<>();
    private MethodSpec.Builder constructor;

    RpcServerGenerator(PluginProtos.CodeGeneratorResponse.Builder response) {
        super(response);
    }

    @Override
    protected JavaFile generateServiceClasses(DescriptorProtos.ServiceDescriptorProto service) {
        // Class Declaration
        serviceRpcServer = TypeSpec.classBuilder(service.getName() + "RpcServer");
        serviceRpcServer.addModifiers(Modifier.PUBLIC);
        serviceRpcServer.addSuperinterface(constantInterfaceName(service));
        serviceRpcServer.addJavadoc("GENERATED CODE: DO NOT MODIFY SOURCE. " +
                "Generated by electrazoom Code Generator from the $N protobuf file",
                service.getName());

        // Field Declarations
        ClassName protoBleServerClass = ClassName.get("com.electrazoom.rpc.ble", "ProtoBleServer");
        FieldSpec bleServerField = FieldSpec.builder(protoBleServerClass, "protoBleServer")
                .addModifiers(Modifier.PRIVATE).build();
        serviceRpcServer.addField(bleServerField);

        for (DescriptorProtos.MethodDescriptorProto method : service.getMethodList()) {
            methodCharacteristicDeclaration(method);
            // Generate the Listener innerClasses
            methodParameterCharacteristicListener(service, method);
        }

        // Constructor
        constructor = MethodSpec.constructorBuilder();
        constructor.addModifiers(Modifier.PUBLIC);
        ClassName rpcInterfaceType = rpcInterfaceName(service);
        constructor.addParameter(rpcInterfaceType, "rpc");

        // Constructor assignment of fields
        constructor.addStatement("$N = new $T(APP_PATH, SERVICE_UUID)", bleServerField,
                bleServerField.type);
        for (DescriptorProtos.MethodDescriptorProto method : service.getMethodList()) {
            methodCharacteristicAssignment(bleServerField, method);
        }
        serviceRpcServer.addMethod(constructor.build());

        // startService Method
        MethodSpec.Builder startService = MethodSpec.methodBuilder("startService");
        ClassName dbusException = ClassName.get("org.freedesktop.dbus.exceptions", "DBusException");
        ClassName interruptException = ClassName.get("java.lang", "InterruptedException");
        startService.addModifiers(Modifier.PUBLIC);
        startService.addException(dbusException);
        startService.addException(interruptException);
        startService.addStatement("$N.startService();", bleServerField);
        serviceRpcServer.addMethod(startService.build());

        return JavaFile.builder(javaPackage, serviceRpcServer.build()).build();
    }

    private void methodParameterCharacteristicListener(
            DescriptorProtos.ServiceDescriptorProto service,
            DescriptorProtos.MethodDescriptorProto method) {
        String interfaceName = methodListenerInterfaceName(method.getName());
        TypeSpec.Builder listener = TypeSpec.classBuilder(interfaceName);
        ClassName listenerInterface = ClassName.get("com.electrazoom.rpc.ble",
                "MessageInputBleCharacteristic" , "InputListener");
        listener.addSuperinterface(listenerInterface);

        // add field to hold the listener
        FieldSpec rpcField = FieldSpec.builder(rpcInterfaceName(service), "rpc",
                Modifier.PRIVATE, Modifier.FINAL).build();
        listener.addField(rpcField);

        // Generate constructor that takes a RPC callback interface as a parameter
        MethodSpec.Builder listenerConstructor = MethodSpec.constructorBuilder();
        listenerConstructor.addModifiers(Modifier.PUBLIC);
        listenerConstructor.addParameter(rpcInterfaceName(service), "rpc");
        listenerConstructor.addStatement("this.$N = $N", rpcField.name, "rpc");
        listener.addMethod(listenerConstructor.build());

        // add methods to handle input from Characteristic
        MethodSpec.Builder onServiceConnectedMethod = MethodSpec.methodBuilder("onServiceConnected");
        onServiceConnectedMethod.addAnnotation(Override.class);
        onServiceConnectedMethod.addModifiers(Modifier.PUBLIC);
        onServiceConnectedMethod.addStatement("$N.onConnect(\"$N\")", rpcField.name, method.getName());
        listener.addMethod(onServiceConnectedMethod.build());

        MethodSpec.Builder onErrorMethod = MethodSpec.methodBuilder("onError");
        onErrorMethod.addAnnotation(Override.class);
        onErrorMethod.addParameter(String.class, "source");
        onErrorMethod.addParameter(String.class, "message");
        onErrorMethod.addModifiers(Modifier.PUBLIC);
        onErrorMethod.addStatement("$N.onError(\"stack\", message)", rpcField.name);
        listener.addMethod(onErrorMethod.build());

        // add method to handle response from the peripheral
        MethodSpec.Builder onMessageInputMethod = MethodSpec.methodBuilder("onMessageInput");
        onMessageInputMethod.addAnnotation(Override.class);
        onMessageInputMethod.addParameter(byte[].class, "bytes");
        onMessageInputMethod.addModifiers(Modifier.PUBLIC);
        onMessageInputMethod.addStatement("$T param", messageTypeName(method.getInputType()));
        onMessageInputMethod.beginControlFlow("if (bytes != null)");
        onMessageInputMethod.beginControlFlow("try");
        onMessageInputMethod.addStatement("param = $T.parseFrom(bytes)",
                messageTypeName(method.getInputType()));
        onMessageInputMethod.addStatement("$T result = $N.$N(param)",
                messageTypeName(method.getOutputType()),
                rpcField.name, method.getName());
        onMessageInputMethod.beginControlFlow("if (result != null)");
        onMessageInputMethod.addStatement("$N.sendMessage(result.toByteArray())",
                returnCharacteristicFields.get(method.getName()).name);
        onMessageInputMethod.endControlFlow(); // result != null
        onMessageInputMethod.endControlFlow(); // try
        ClassName protobufException = ClassName.get("com.google.protobuf",
                "InvalidProtocolBufferException");
        onMessageInputMethod.beginControlFlow("catch ($T e)", protobufException);
        onMessageInputMethod.addStatement("onError($S, e.getLocalizedMessage())", method.getName());
        onMessageInputMethod.endControlFlow(); // catch
        onMessageInputMethod.endControlFlow(); // if bytes != null
        listener.addMethod(onMessageInputMethod.build());
        serviceRpcServer.addType(listener.build());
    }

    private String methodListenerInterfaceName(String name) {
        return initialCaps(name + "Listener");
    }

    private void methodCharacteristicAssignment(FieldSpec bleServerField, DescriptorProtos.MethodDescriptorProto method) {
        String name = method.getName();
        FieldSpec param = paramCharacteristicFields.get(name);
        FieldSpec ret = returnCharacteristicFields.get(name);
        constructor.addStatement("$N = new $T(\"rpc_" + name + "Param\"," + paramUuidName(name) +
                ")", param, param.type);
        constructor.addStatement("$N.setInputListener(new $N(rpc))", param, methodListenerInterfaceName(name));
        constructor.addStatement("$N = new $T(\"rpc_" + name + "Return\"," + returnUuidName(name) +
                ")", ret, ret.type);
        constructor.addStatement("$N.addMessageCharacteristic($N)", bleServerField, param);
        constructor.addStatement("$N.addMessageCharacteristic($N)", bleServerField, ret);
    }

    private void methodCharacteristicDeclaration(DescriptorProtos.MethodDescriptorProto method) {
        ClassName input = ClassName.get("com.electrazoom.rpc.ble", "MessageInputBleCharacteristic");
        ClassName output = ClassName.get("com.electrazoom.rpc.ble", "MessageOutputBleCharacteristic");

        FieldSpec inputField = FieldSpec.builder(input, method.getName() + "ParameterCharacteristic").build();
        FieldSpec outputField = FieldSpec.builder(output, method.getName() + "ReturnCharacteristic").build();

        serviceRpcServer.addField(inputField);
        serviceRpcServer.addField(outputField);
        paramCharacteristicFields.put(method.getName(), inputField);
        returnCharacteristicFields.put(method.getName(), outputField);
    }
}
