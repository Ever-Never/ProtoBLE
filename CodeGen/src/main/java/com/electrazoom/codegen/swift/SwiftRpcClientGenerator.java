/*
 * ProtoBLE - Protobuf RPC over Bluetooth Low Energy
 * Copyright (c) 2018. Geoffrey Matrangola, electrazoom.com
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, version 3 of the License.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>
 *
 *     This program is also available under a commercial license. If you wish
 *     to redistribute this library and derivative work for commercial purposes
 *     please see ProtoBLE.com to obtain a proprietary license that will fit
 *     your needs.
 */

package com.electrazoom.codegen.swift;

import com.electrazoom.codegen.ClassGenerator;
import com.electrazoom.protoble.BleExtensions;
import com.google.protobuf.DescriptorProtos;
import com.google.protobuf.compiler.PluginProtos;

import java.util.List;
import java.util.stream.Collectors;

class SwiftRpcClientGenerator extends ClassGenerator {
    public SwiftRpcClientGenerator(PluginProtos.CodeGeneratorResponse.Builder response) {
        super(response);
    }

    @Override
    public void generate(DescriptorProtos.FileDescriptorProto descriptor) {
        for (DescriptorProtos.ServiceDescriptorProto service : descriptor.getServiceList()) {
            String swiftFile = generateServiceClasses(service);
            PluginProtos.CodeGeneratorResponse.File.Builder responseFile =
                    PluginProtos.CodeGeneratorResponse.File.newBuilder();
            responseFile.setName(service.getName() + "Service.pb.swift");
            String header = "// DO NOT EDIT THIS FILE! Generated from " + descriptor.getName()
                    + "\n\n";
            responseFile.setContent(header + swiftFile);
            response.addFile(responseFile);
        }
    }

    private String generateServiceClasses(DescriptorProtos.ServiceDescriptorProto service) {
        StringBuilder sb = new StringBuilder();
        generateImports(sb);
        generateConstants(sb, service);
        generateDelegate(sb, service);
        generateService(sb, service);

        return sb.toString();
    }

    private void generateImports(StringBuilder sb) {
        sb.append("import Foundation\n");
        sb.append("import ProtoBLEiOS\n");
        sb.append("import CoreBluetooth\n\n");
    }

    private void generateConstants(StringBuilder sb, DescriptorProtos.ServiceDescriptorProto service) {
        // Generate Constants
        DescriptorProtos.ServiceOptions options = service.getOptions();
        String serviceUuidExt = options.getExtension(BleExtensions.uuid);

        sb.append("let ").append(initialCaps(service.getName())).append("Service_UUID");
        sb.append(" = CBUUID(string: \"").append(serviceUuidExt).append("\")\n\n");

        for (DescriptorProtos.MethodDescriptorProto method : service.getMethodList()) {
            generateMethodConstants(sb, method);
        }
        sb.append("\n");
    }

    private void generateMethodConstants(StringBuilder sb, DescriptorProtos.MethodDescriptorProto method) {
        String parameterUuid = method.getOptions().getExtension(BleExtensions.parameterUuid);
        String returnUuid = method.getOptions().getExtension(BleExtensions.returnUuid);

        sb.append("let ").append(paramUuidName(method.getName()));
        sb.append(" = CBUUID(string: \"").append(parameterUuid).append("\")\n");

        sb.append("let ").append(returnUuidName(method.getName()));
        sb.append(" = CBUUID(string: \"").append(returnUuid).append("\")\n");
    }

    private void generateDelegate(StringBuilder sb, DescriptorProtos.ServiceDescriptorProto service) {
        sb.append("protocol ").append(service.getName()).append("Delegate: ProtoBleServiceDelegate {\n");
        for (DescriptorProtos.MethodDescriptorProto methodDescriptorProto : service.getMethodList()) {
            generateDelegateMethodDescriptor(sb, methodDescriptorProto);
        }
        sb.append("}\n\n");
    }

    private void generateDelegateMethodDescriptor(StringBuilder sb,
                                                  DescriptorProtos.MethodDescriptorProto method) {
        sb.append("    func ").append(method.getName()).append("DidComplete");
        sb.append("(_ ").append(initialLower(method.getOutputType())).append(": ");
        sb.append(initialCaps(method.getOutputType())).append(")\n");

        sb.append("    func ").append(method.getName()).append("MessageProgress(current: Int, total: Int)\n\n");

    }

    private void generateService(StringBuilder sb, DescriptorProtos.ServiceDescriptorProto service) {
        sb.append("class ").append(service.getName()).append("BleService: ProtoBleServiceDelegate {\n");
        sb.append("    let bleService: ProtoBleService\n");
        sb.append("    let clientDelegate: ").append(initialCaps(service.getName()));
        sb.append("Delegate\n\n");

        for (DescriptorProtos.MethodDescriptorProto method : service.getMethodList()) {
            methodRpcHandler(sb, service, method);
        }
        generateInit(sb, service);
        for (DescriptorProtos.MethodDescriptorProto method : service.getMethodList()) {
            methodDeceleration(sb, method);
        }

        protoBleServiceDelegation(sb, service);
        sb.append("}\n");
    }

    private void generateInit(StringBuilder sb, DescriptorProtos.ServiceDescriptorProto service) {
        sb.append("    public init(delegate: ").append(service.getName()).append("Delegate) {\n");
        sb.append("        clientDelegate = delegate\n");
        for (DescriptorProtos.MethodDescriptorProto method : service.getMethodList()) {
            methodRpcHandlerInstance(sb, method);
        }
        sb.append("        bleService = ProtoBleService(serviceUuid: ").append(service.getName());
        List<String> names = service.getMethodList().stream()
                .map(m -> m.getName() + "Rpc")
                .collect(Collectors.toList());
        sb.append("Service_UUID, rpc: [").append(String.join(",", names)).append("])\n");
        sb.append("        bleService.serviceDelegate = self\n");
        sb.append("    }\n\n");
    }

    private void protoBleServiceDelegation(StringBuilder sb,
                                           DescriptorProtos.ServiceDescriptorProto service) {
        sb.append("    func bleDidDiscoverCharacteristics() {\n");
        sb.append("        clientDelegate.bleDidDiscoverCharacteristics()\n");
        sb.append("    }\n");

        sb.append("    func bleDidError(_ error: Error) {\n");
        sb.append("        clientDelegate.bleDidError(error);\n");
        sb.append("    }\n\n");
    }

    private void methodDeceleration(StringBuilder sb,
                                    DescriptorProtos.MethodDescriptorProto method) {
        sb.append("    func ").append(initialLower(method.getName())).append("(");
        sb.append(initialLower(method.getInputType())).append(": ");
        sb.append(initialCaps(method.getInputType())).append(") throws {\n");
        sb.append("        try ").append(initialLower(method.getName()));
        sb.append("Rpc.writeValue(data: ").append(initialLower(method.getInputType()));
        sb.append(".serializedData())\n");
        sb.append("    }\n\n");
    }

    private void methodRpcHandler(StringBuilder sb,
                                   DescriptorProtos.ServiceDescriptorProto service,
                                   DescriptorProtos.MethodDescriptorProto method) {
        sb.append("    let ").append(initialLower(method.getName())).append("Rpc: ProtoBleRpc\n");

        sb.append("    class ").append(initialCaps(method.getName()));
        sb.append("RpcHandler: ProtoBleRpcDelegate {\n");
        sb.append("        let delegate: ").append(initialCaps(service.getName())).append("Delegate\n");
        sb.append("        init(_ delegate: ").append(initialCaps(service.getName())).append("Delegate) { \n");
        sb.append("            self.delegate = delegate\n");
        sb.append("        }\n\n");

        sb.append("        func messageWasReceived(_ data: Data) {\n");
        sb.append("            if let x = try? ").append(initialCaps(method.getOutputType()));
        sb.append("(serializedData: data) {\n");
        sb.append("                 delegate.").append(initialLower(method.getName()));
        sb.append("DidComplete(x)\n");
        sb.append("            }\n");
        sb.append("            else {\n");
        sb.append("                 delegate.bleDidError(ProtoBleError(kind: .invalidMessage, ");
        sb.append(                       "message: \"Received Invalid");
        sb.append(                       initialCaps(method.getOutputType()));
        sb.append(                       " Message.\"))\n");
        sb.append("            }\n");
        sb.append("        }\n");
        sb.append("        func messageProgress(current:Int, total:Int) {\n");
        sb.append("            delegate.").append(initialLower(method.getName()));
        sb.append("MessageProgress(current: current, total: total)\n");
        sb.append("        }\n");
        sb.append("        func rpcDidError(_ err: Error) {\n");
        sb.append("            self.delegate.bleDidError(err)\n");
        sb.append("        }\n");
        sb.append("    }\n\n");
    }

    private void methodRpcHandlerInstance(StringBuilder sb, DescriptorProtos.MethodDescriptorProto method) {
        sb.append("        let ").append(initialLower(method.getName())).append("RpcHandler = ");
        sb.append(initialCaps(method.getName())).append("RpcHandler(delegate)\n");
        sb.append("        ").append(initialLower(method.getName()));
        sb.append("Rpc = ProtoBleRpc(name: \"").append(method.getName()).append("\", paramUuid: ");
        sb.append(paramUuidName(method.getName())).append(", resultUuid: ");
        sb.append(returnUuidName(method.getName())).append(", rpcDelegate: ");
        sb.append(initialLower(method.getName())).append("RpcHandler)\n");
    }
}
